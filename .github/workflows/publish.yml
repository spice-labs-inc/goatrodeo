name: Publish package to Maven Central, GitHub Packages, and Container Image to Docker Hub

on:
  push:
    branches:
      - main
      - mj/cli-scan
    tags:
      - "v*.*.*"

env:
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_NAMESPACE: ${{ secrets.DOCKER_USERNAME }}
  PLATFORMS: linux/amd64,linux/arm64

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  publish-jars:
    name: Publish JARs to GitHub (Maven Central temporarily disabled)
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_tag: ${{ steps.guard.outputs.is_tag }}
      is_tag_on_main: ${{ steps.guard.outputs.is_tag_on_main }}
      release_timestamp: ${{ steps.release-notification.outputs.timestamp }}
      release_channel_id: ${{ steps.release-notification.outputs.channel_id }}

    steps:
      - name: Notify release
        id: release-notification
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: release
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          github-token: ${{ github.token }}

      - name: Checkout with LFS
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Determine release conditions (tag on main)
        id: guard
        shell: bash
        run: |
          set -euo pipefail
          IS_TAG=false
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            IS_TAG=true
          fi
          IS_TAG_ON_MAIN=false
          if [[ "$IS_TAG" == "true" ]]; then
            git fetch -q origin main
            TAG_SHA="$(git rev-parse HEAD)"
            MAIN_SHA="$(git rev-parse origin/main)"
            if git merge-base --is-ancestor "$TAG_SHA" "$MAIN_SHA"; then
              IS_TAG_ON_MAIN=true
            fi
          fi
          echo "is_tag=$IS_TAG" >> "$GITHUB_OUTPUT"
          echo "is_tag_on_main=$IS_TAG_ON_MAIN" >> "$GITHUB_OUTPUT"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "sbt"

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Derive and validate version
        id: version
        shell: bash
        run: |
          raw_version="${GITHUB_REF#refs/tags/v}"
          if [[ "${{ steps.guard.outputs.is_tag }}" == "true" ]]; then
            if [[ ! "$raw_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Invalid tag format: $raw_version. Must be v<major>.<minor>.<patch>." >&2
              exit 1
            fi
            echo "projectVersion=$raw_version" >> "$GITHUB_ENV"
            echo "version=$raw_version" >> "$GITHUB_OUTPUT"
          else
            # Branch build: still build/scan but no publish-from-branch
            echo "projectVersion=0.0.0-SNAPSHOT" >> "$GITHUB_ENV"
            echo "version=0.0.0-SNAPSHOT" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and publish JARs to GitHub Packages
        run: |
          SBT_OPTS="-Xmx8G -Duser.timezone=GMT" sbt \
            "set ThisBuild / version := \"${{ env.projectVersion }}\"" \
            +publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TARGET: github

      - name: Scan built artifacts with Spice-Labs CLI
        if: always()
        env:
          SPICE_PASS: ${{ secrets.SPICE_PASS }}
        shell: bash
        run: |
          # Use channel-style scan tags per project defaults
          TAG="${{ (startsWith(github.ref, 'refs/tags/v')) && format('{0}-release', github.event.repository.name) || format('{0}-staging', github.event.repository.name) }}"
          # SBT places output jars under **/target/**
          docker run --rm \
            -v "$PWD:/work:ro" \
            -e SPICE_PASS \
            spicelabs/spice-labs-cli:0.2.27 \
            --input /work/target \
            --tag "$TAG"

  publish-to-central:
    name: Re-publish Goatrodeo to Maven Central
    runs-on: ubuntu-24.04
    needs: publish-jars
    if: needs.publish-jars.outputs.is_tag_on_main == 'true'
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"
      
      - name: Write settings.xml for Central
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.MAVEN_CENTRAL_USERNAME }}</username>
                <password>${{ secrets.MAVEN_CENTRAL_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Import GPG key
        run: |
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}" | gpg --batch --import

      - name: Set project version from tag
        run: |
          mvn -B --file maven/pom.xml \
              clean versions:set -DnewVersion="${{ needs.publish-jars.outputs.version }}" -DgenerateBackupPoms=false

      - name: Create target dir
        run: mkdir -p maven/target/external

      - name: Download artifacts from GitHub Maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.publish-jars.outputs.version }}
        run: |
          ARTIFACTS=(
            "goatrodeo_3-${VERSION}.jar"
            "goatrodeo_3-${VERSION}-sources.jar"
            "goatrodeo_3-${VERSION}-javadoc.jar"
            "goatrodeo_3-${VERSION}.pom"
            "goatrodeo_3-${VERSION}-fat.jar"
          )
          for file in "${ARTIFACTS[@]}"; do
            echo "Downloading $file"
            curl -fL -o "maven/target/external/$file" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/octet-stream" \
              "https://maven.pkg.github.com/spice-labs-inc/goatrodeo/io/spicelabs/goatrodeo_3/${VERSION}/${file}"
          done

      - name: Inject real dependencies block into fake pom.xml
        run: |
          set -e
          VERSION="${{ needs.publish-jars.outputs.version }}"
          REAL_POM="maven/target/external/goatrodeo_3-${VERSION}.pom"
          FAKE_POM="maven/pom.xml"
          real_deps=$(awk '/<dependencies>/,/<\/dependencies>/' "$REAL_POM")
          awk -v repl="$real_deps" '
            /<!-- @REAL_DEPENDENCIES@ -->/ {print repl; next}
            {print}
          ' "$FAKE_POM" > "${FAKE_POM}.tmp" && mv "${FAKE_POM}.tmp" "$FAKE_POM"

      - name: Publish to Maven Central
        run: |
          cd maven
          mvn --batch-mode deploy
        env:
          GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

  docker-image:
    name: Build (always) and Push (tags on main only) Docker Image
    runs-on: ubuntu-24.04
    needs: publish-jars
    permissions:
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Fat JAR from GitHub Packages
        if: needs.publish-jars.outputs.is_tag == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -fL -o goatrodeo-fat.jar \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/octet-stream" \
            "https://maven.pkg.github.com/spice-labs-inc/goatrodeo/io/spicelabs/goatrodeo_3/${{ needs.publish-jars.outputs.version }}/goatrodeo_3-${{ needs.publish-jars.outputs.version }}-fat.jar"

      - name: Build and (conditionally) push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ needs.publish-jars.outputs.is_tag_on_main == 'true' }}
          provenance: mode=max
          sbom: true
          tags: spicelabs/goatrodeo:${{ needs.publish-jars.outputs.version }}

  notify:
    needs: [publish-jars, publish-to-central, docker-image]
    if: always()
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Check deployment status
        id: deployment-status
        shell: bash
        run: |
          JARS_STATUS="${{ needs.publish-jars.result }}"
          CENTRAL_STATUS="${{ needs.publish-to-central.result }}"
          DOCKER_STATUS="${{ needs.docker-image.result }}"
          if [ "$JARS_STATUS" = "success" ] && [ "$CENTRAL_STATUS" = "success" ] && [ "$DOCKER_STATUS" = "success" ]; then
            echo "overall_status=success" >> $GITHUB_OUTPUT
            echo "message=All components published successfully" >> $GITHUB_OUTPUT
          else
            echo "overall_status=failure" >> $GITHUB_OUTPUT
            MESSAGE="Publishing summary:"
            MESSAGE="$MESSAGE $([ "$JARS_STATUS" = success ] && echo 'JARs OK' || echo 'JARs FAILED');"
            MESSAGE="$MESSAGE $([ "$CENTRAL_STATUS" = success ] && echo ' Central OK' || echo ' Central FAILED');"
            MESSAGE="$MESSAGE $([ "$DOCKER_STATUS" = success ] && echo ' Docker OK' || echo ' Docker FAILED')"
            echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          fi

      - name: Notify deployment result
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: ${{ steps.deployment-status.outputs.overall_status == 'success' && 'deployment-success' || 'deployment-failure' }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          workflow-name: Release
          environment: production
          thread-ts: ${{ needs.publish-jars.outputs.release_timestamp }}
          channel-id: ${{ needs.publish-jars.outputs.release_channel_id }}
