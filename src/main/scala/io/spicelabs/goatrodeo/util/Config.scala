package io.spicelabs.goatrodeo.util

import com.typesafe.scalalogging.Logger
import io.bullet.borer.Dom
import io.bullet.borer.Json
import io.spicelabs.goatrodeo.util.Config.ExpandFiles.fixTilde
import org.apache.commons.io.filefilter.WildcardFileFilter
import scopt.OParser
import scopt.OParserBuilder

import java.io.File
import java.io.FileFilter
import java.nio.file.Files
import java.util.regex.Pattern
import scala.jdk.CollectionConverters.*
import scala.util.Try
import os.ReadablePath
import scala.io.Source
import scala.io.BufferedSource

/** Command Line Configuration
  *
  * @param analyze
  *   -- analyze a file against the GC (GitOID Corpus)
  * @param out
  *   -- the place to output either the analysis or the results of the build
  * @param build
  *   -- build a GitOID Corpus based on JAR files found in the directory
  * @param threads
  *   -- the number of threads for the build -- default 4... typically 4x the
  *   number of physical CPUs
  */
case class Config(
    out: Option[File] = None,
    build: Vector[File] = Vector(),
    ingested: Option[File] = None,
    ignore: Vector[File] = Vector(),
    fileList: Vector[File] = Vector(),
    tag: Option[String] = None,
    exclude: Vector[(String, Try[Pattern])] = Vector(),
    threads: Int = 4,
    tagJson: Option[Dom.Element] = None,
    blockList: Option[File] = None,
    maxRecords: Int = 50000,
    tempDir: Option[File] = None,
    useStaticMetadata: Boolean = false,
    dumpRootDir: Option[File] = None,
    emitJsonDir: Option[File] = None,
    nonexistantDirectories: Vector[File] = Vector(),
    mimeFilter: IncludeExclude = IncludeExclude()
) {
  def getFileListBuilders(): Vector[() => Seq[File]] = {
    build.map(file => () => Helpers.findFiles(file, f => true)) ++ fileList
      .map(f => {
        val fileNames =
          Files
            .readAllLines(f.toPath())
            .asScala
            .toSeq
            .map(fn => new File(fn))
            .filter(_.exists())
        () => fileNames
      })
  }
}

object Config {
  private val logger = Logger(getClass())
  lazy val builder: OParserBuilder[Config] = OParser.builder[Config]
  lazy val parser1: OParser[Unit, Config] = {
    import builder._
    OParser.sequence(
      programName("goatrodeo"),
      head("goatrodeo", hellogoat.BuildInfo.version),
      opt[File]("block")
        .text(
          "The gitoid block list. Do not process these gitoids. Used for common gitoids such as license files"
        )
        .action((x, c) => c.copy(blockList = ExpandFiles(x).headOption)),
      opt[File]('b', "build")
        .text("Build gitoid database from jar files in a directory")
        .action((x, c) => {
          val tildeExpand = fixTilde(x)
          if (!tildeExpand.exists()) {
            c.copy(nonexistantDirectories = c.nonexistantDirectories :+ x)
          } else {
            c.copy(build =
              (c.build ++ ExpandFiles(x))
                .filter(f => f.exists()),
            )
          }
        }),
      opt[Boolean]("static-metadata")
        .text(
          "Enhance metadata with Syft (must install https://github.com/anchore/syft)"
        )
        .action((x, c) => c.copy(useStaticMetadata = x)),
      opt[String]("tag")
        .text(
          "Tag all top level artifacts (files) with the current date and the text of the tag"
        )
        .action((x, c) => c.copy(tag = Some(x))),
      opt[File]("ingested")
        .text(
          "Append all the ingested files to this file on successful completion"
        )
        .action((x, c) => c.copy(ingested = ExpandFiles(x).headOption)),
      opt[File]("ignore")
        .text(
          "A file containing paths to ignore, likely because they have been processed in the past"
        )
        .action((x, c) =>
          c.copy(ignore = (c.ignore ++ ExpandFiles(x)).filter(_.exists()))
        ),
      opt[String]("tag-json")
        .text("Json that is included as part of the tag")
        .action((s, c) =>
          c.copy(tagJson =
            Some(Json.decode(s.getBytes("UTF-8")).to[Dom.Element].value)
          )
        ),
      opt[File]("file-list")
        .text(
          "A file containing a list of files to process. This may be used in conjunction with the `-b` (build) flag and this list may be generated by an external process"
        )
        .action((file: File, config: Config) =>
          config.copy(fileList =
            (config.fileList ++ ExpandFiles(file)).filter(_.exists())
          )
        ),
      opt[String]("exclude-pattern")
        .text(
          "A regular expression pattern that can be used to exclude files, for example `html$` will exclude all files that end in `html`"
        )
        .action((p, config) =>
          config.copy(exclude = (config.exclude :+ (p -> Try {
            Pattern.compile(p)
          })))
        ),
      opt[Int]("maxrecords")
        .text(
          "The maximum number of records to process at once. Default 50,000"
        )
        .action((x, c) => if (x > 100) c.copy(maxRecords = x) else c),
      opt[File]('o', "out")
        .text("output directory for the file-system based gitoid storage")
        .action((x, c) => c.copy(out = Some(x))),
      opt[File]("dump-roots")
        .text(
          "Make a directory and dump the roots in JSON files in the directory"
        )
        .action((x, c) => c.copy(dumpRootDir = Some(x))),
      opt[File]("dump-json")
        .text("Make a directory and dump the ADG as JSON in to directory")
        .action((x, c) => c.copy(emitJsonDir = Some(x))),
      opt[File]("tempdir")
        .text("Where to temporarily store files... should be a RAM disk")
        .action((x, c) => c.copy(tempDir = Some(x))),
      opt[Int]('t', "threads")
        .text(
          "How many threads to run (default 4). Should be 2x-3x number of cores"
        )
        .action((t, c) => c.copy(threads = t)),
      opt[String]("mime-filter")
        .text("add an include or exclude MIME type filter:\n +mime include mime\n -mime exclude mime\n *regex include mime that matches regex\n /regex exclude mime that matches regex")
        .action((x, c) => c.copy(mimeFilter = c.mimeFilter :+ x)),
      opt[File]("mime-filter-file")
        .text("")
        .action((f, c) => c.copy(mimeFilter = c.mimeFilter ++ VectorOfStrings(f))),
      opt[Unit]('V', "version")
        .text("print version and exit")
        .action((_, c) => {
          logger.info(f"Goat Rodeo version ${hellogoat.BuildInfo}")
          System.exit(0)
          c
        }),
      opt[Unit]('?', "help")
        .text("print help and exit")
        .action((_, c) => {
          logger.info(OParser.usage(parser1))
          System.exit(0)
          c
        })
    )
  }

  object VectorOfStrings {
    def apply(in: File): Vector[String] = {
      var source: BufferedSource = null
      try {
        source = Source.fromFile(in.getAbsoluteFile())
        source.getLines().toVector // getLines() does not include new lines (yay!)
      } finally {
        source.close()
      }
    }
    def apply(in: String): Vector[String] = {
      val f = File(in)
      apply(f)
    }
  }


  object ExpandFiles {
    def apply(in: File): Vector[File] = {

      val fixed = fixTilde(in)
      if (!fixed.exists()) {
        Vector(fixed)
      } else {
        val allFiles = {
          val parent = fixed.getAbsoluteFile().getParentFile()
          val wcf: FileFilter =
            WildcardFileFilter.builder.setWildcards(fixed.getName()).get()
          parent.listFiles(wcf)
        }
        allFiles.toVector
      }
    }
    def unapply(in: Option[Vector[File]]): Option[Vector[File]] =
      in match {
        case None => None
        case Some(vf) =>
          val ret = for {
            fa <- vf
            f = fixTilde(fa)
            i <- {
              val parent = f.getAbsoluteFile().getParentFile()
              val wcf: FileFilter =
                WildcardFileFilter.builder.setWildcards(f.getName()).get()
              parent.listFiles(wcf)
            }
          } yield {
            i
          }
          Some(ret)
      }

    def fixTilde(in: File): File = {
      if (in.getPath().startsWith("~" + File.separator)) {
        val path = System.getProperty("user.home") + in.getPath().substring(1)
        new File(path)
      } else in
    }
  }

}
